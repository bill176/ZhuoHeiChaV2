@using ZhuoHeiChaUI.Events
@using ZhuoHeiChaUI.Services
@inject PlayerHubConnectionService PlayerHubConnection

<h3>ButtonRegion</h3>
<div>
    @switch (clientState)
    {
        case ClientState.Playing:
            <button type="button" class="button" name="playCard" @onclick="OnPlayCardButtonClicked">
                出牌!
            </button>
            <button type="button" class="button" name="skip" @onclick="OnSkipButtonClicked">
                跳过
            </button>
            break;
        case ClientState.ReturningTribute:

        
      <ReturnTributeComponent ProcessReturnTribute=@ProcessReturnTribute payer="@payer" cardsCountReturnToPayer="@cardsCountReturnToPayer"></ReturnTributeComponent>
    
            
            break;
        case ClientState.AceGoingPublic:
            <button type="button" class="button" name="aceGoPublic" @onclick="OnAceGoPublicButtonClicked">
                亮黑叉
            </button>
            <button type="button" class="button" name="aceStayPrivate" @onclick="OnAceStayPrivateButtonClicked">
                不亮
            </button>
            break;
        case ClientState.AskingAnotherRound:
            <div class="another-round">
                <button type="button" class="button" name="playAnotherRound" @onclick="OnPlayAnotherRoundButtonClicked">
                    再来!
                </button>
            </div>
            break;
        default:
            <span></span>
            break;
    }
</div>


@code {

    int payer;
    int cardsCountReturnToPayer;

    [Parameter]
    public int PlayerId { get; set; }

    [Parameter]
    public Func<bool, Task> ProcessAceGoPublic { get; set; }
    [Parameter]
    public Func<List<int>, int, Task> ProcessReturnTribute { get; set; }

    [Parameter]
    public Func<bool, Task> ProcessPlayHand { get; set; }

    private ClientState clientState = ClientState.Default;

    private enum ClientState
    {
        Default,
        Playing,
        ReturningTribute,
        AceGoingPublic,
        AskingAnotherRound
    }

    private void OnPlayCardButtonClicked()
    {
        ProcessPlayHand(false);
        clientState = ClientState.Default;
        StateHasChanged();
    }

    private void OnSkipButtonClicked()
    {
        ProcessPlayHand(true);
        clientState = ClientState.Default;
        StateHasChanged();
    }



    private void OnAceGoPublicButtonClicked()
    {
        ProcessAceGoPublic(true);
        clientState = ClientState.Default;
        StateHasChanged();
    }

    private void OnAceStayPrivateButtonClicked()
    {
        ProcessAceGoPublic(false);
        clientState = ClientState.Default;
        StateHasChanged();
    }

    private void OnPlayAnotherRoundButtonClicked() { }

    protected override void OnInitialized()
    {
        PlayerHubConnection.NotifyPlayCard += OnNotifyPlayCard;
        PlayerHubConnection.NotifyAceGoPublic += OnNotifyAceGoPublic;
        PlayerHubConnection.NotifyPlayAnotherRound += OnNotifyPlayAnotherRound;
        PlayerHubConnection.NotifyReturnTribute += OnNotifyReturnTribute;
        PlayerHubConnection.NotifyResubmit += OnNotifyPlayHandSuccess;
        PlayerHubConnection.NotifyResubmit += OnNotifyResubmit;
    }

    private void OnNotifyPlayCard(object? sender, NotifyPlayCardEventArgs args)
    {
        var currentPlayerId = args.CurrentPlayerId;
        if (PlayerId == currentPlayerId)
        {
            clientState = ClientState.Playing;
            StateHasChanged();
        }
    }

    private void OnNotifyResubmit(object? sender, NotifyResubmitEventArgs args)
    {
        clientState = ClientState.Playing;
        StateHasChanged();
    }

    private void OnNotifyAceGoPublic(object? sender, NotifyAceGoPublicEventArgs e)
    {
        if (e.IsPublicAce)
        {
            clientState = ClientState.AceGoingPublic;
            StateHasChanged();
        }
       
    }

    private void OnNotifyPlayAnotherRound(object? sender, NotifyPlayAnotherRoundEventArgs e)
    {
        clientState = ClientState.AskingAnotherRound;
        StateHasChanged();
    }

    private void OnNotifyReturnTribute(object? sender, NotifyReturnTributeEventArgs args)
    {
        payer = args.Payer;
        cardsCountReturnToPayer = args.CardsToBeReturnCount;
        clientState = ClientState.ReturningTribute;
        StateHasChanged();
    }

    private void OnNotifyPlayHandSuccess(object? sender, NotifyResubmitEventArgs e)
    {
        clientState = ClientState.Default;
        StateHasChanged();
    }
}
