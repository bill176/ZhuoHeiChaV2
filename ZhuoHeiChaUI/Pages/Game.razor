@page "/game/{gameId:int}"
@using System.Net.Http
@inject HttpClient Http
@using Microsoft.AspNetCore.SignalR.Client
@inject PlayerHubConnectionService PlayerHubConnection
@using ZhuoHeiChaShared
@using ZhuoHeiChaUI.Services
@using ZhuoHeiChaUI.Events
@using ZhuoHeiChaUI.Components

@*@if (!successJoin)
{
    <div>
        <h3>Enter your name</h3>
        <button @onclick="AddToGame">Enter</button>
        <div>
            <label>Your name</label>
            <input @bind="@userName" />
        </div>
    </div>
}
else
{
    <p>Wait dealer to start game...</p>
    <p>Current player(s):</p>
    <WaitingPlayerList Players="@players" />
    @if (playerId == "0" && StartGameUIFlag)
    {
        <button @onclick="StartGame" disabled="@(canStartGame? false : true)">Start Game</button>
    }
    @if (StartGameUIFlag)
    {
        <p>Wait dealer to start game</p>
    }

    <ButtonContainer ProcessAceGoPublic=@ProcessAceGoPublic ProcessReturnTribute=@ProcessReturnTribute></ButtonContainer>

}*@

@switch (gameState)
{
    case GameState.Default:
        <div>
            <h3>Enter your name</h3>
            <button @onclick="AddToGame">Enter</button>
            <div>
                <label>Your name</label>
                <input @bind="@userName" />
            </div>
        </div>
        break;

    case GameState.WaitingToStart:
        <p>Wait dealer to start game...</p>
        <p>Current player(s):</p>
        <WaitingPlayerList Players="@players" />
        @if (playerId == 0)
        {
            <button @onclick="StartGame" disabled="@(canStartGame? false : true)">Start Game</button>
        }
        else
        {
            <p>Wait dealer to start game</p>
        }

        break;

    case GameState.DisplayingCard:
        <ButtonContainer PlayerId="@playerId" ProcessAceGoPublic=@ProcessAceGoPublic ProcessReturnTribute=@ProcessReturnTribute ProcessPlayHand=@ProcessPlayHand PlayOneMoreRound=@PlayOneMoreRound></ButtonContainer>
        <PlayingCards CardIds="@cards" IsInteractive="true" @bind-SelectedCardIds="@SelectedCardIds" />
        <label>@string.Join(',', SelectedCardIds)</label>
        break;

}



@code {
    [Parameter]
    public int GameId { get; set; }

    private GameState gameState = GameState.Default;

    private enum GameState
    {
        Default,
        WaitingToStart,
        DisplayingCard,
        PlayCard
    }

    private int playerId;
    private string userName;
    private bool canStartGame = false;
    private List<Player> players = new List<Player>();
    private List<int> cards = new List<int>();
    private bool CanPlayHand = false;

    private List<int> PlayerTypeListThisRound;

    private List<int> SelectedCardIds = new List<int>();

    private HubConnection _hubConnection;

    protected override async Task OnInitializedAsync()
    {
        PlayerHubConnection.ReceiveMessage += OnReceiveMessage;
        PlayerHubConnection.NotifyCanStartGame += OnNotifyCanStartGame;
        PlayerHubConnection.NotifyNewPlayerAdded += OnNotifyNewPlayerAdded;
        PlayerHubConnection.InitializeGameState += InitialGameState;
        PlayerHubConnection.NotifyCardsUpdated += UpdateCards;
        PlayerHubConnection.NotifyPlayCard += OnNotifyPlayCard;
        PlayerHubConnection.NotifyResubmit += OnNotifyResubmit;
        PlayerHubConnection.NotifyReturnTributeSuccesful += OnNotifyReturnTributeSuccessful;
    }

    private async Task AddToGame()
    {

        var connectionId = await PlayerHubConnection.EstablishConnection();
        var response = await Http.PostAsJsonAsync<Player>($"api/game/{GameId}/players", new Player
        {
            ConnectionId = connectionId,
            Name = userName
        });
        if (!response.IsSuccessStatusCode) return;

        var IdString = await response.Content.ReadAsStringAsync();
        playerId = Int32.Parse(IdString);
        Console.WriteLine($"Player # {playerId} added, name: {userName}. Connection id: {connectionId}");
        gameState = GameState.WaitingToStart;
        StateHasChanged();
    }

    private async Task StartGame()
    {
        var response = await Http.PostAsJsonAsync($"api/game/{GameId}/init", new { });
        if (!response.IsSuccessStatusCode)
        {
            Console.WriteLine("Unable to init game!");
            return;
        }
        Console.WriteLine("Game successfully started!");

    }

    private void InitialGameState(object? sender, InitializeGameStateEventArgs args)
    {
        cards = args.CardBefore;
        Console.WriteLine(string.Join(",", cards));
        // show cards
        Console.WriteLine("This is your original cards");
        cards = args.CardAfter;
        Console.WriteLine(string.Join(",", cards));
        // show cards
        Console.WriteLine("This is your cards after pay tribute");
        gameState = GameState.DisplayingCard;
        StateHasChanged();
    }


    private void UpdateCards(object? sender, NotifyCardsUpdatedEventArgs args)
    {
        cards = args.UpdatedCard;
        StateHasChanged();
        Console.WriteLine(string.Join(",", cards));

    }


    private async Task ProcessReturnTribute(int payer)
    {
        string cardsToBeReturnedString = string.Join(",", SelectedCardIds);
        var response = await Http.PostAsJsonAsync($"api/game/{GameId}/ReturnTribute?receiver={playerId}&payer={payer}&cardsToBeReturnedString={cardsToBeReturnedString}", new { });

        if (!response.IsSuccessStatusCode)
        {
            Console.WriteLine($"Failed return cards to {payer}!");
            return;
        }

        Console.WriteLine($"you just return cards to {payer}!");
    }

    private async Task ProcessAceGoPublic(bool IsGoPublic)
    {
        var response = await Http.PostAsJsonAsync($"api/game/{GameId}/acegopublic?playerId={playerId}&isGoPublic={IsGoPublic}", new { });
        Console.WriteLine("you just Publish the Ace!");
    }

    private async Task ProcessPlayHand(bool isSkip)
    {
        CanPlayHand = false;

        if (isSkip)
        {
            await Http.PostAsJsonAsync($"api/game/{GameId}/PlayHand?playerId={playerId}&cardsTobePlay=", new { });
            Console.WriteLine("Finish Skipping!");
            SelectedCardIds = new List<int>();
            StateHasChanged();
            return;
        }

        string cardsTobePlay = string.Join(",", SelectedCardIds);
        var response = await Http.PostAsJsonAsync($"api/game/{GameId}/PlayHand?playerId={playerId}&cardsTobePlay={cardsTobePlay}", new { });
        Console.WriteLine("Finish playing hand!");
        SelectedCardIds = new List<int>();
        StateHasChanged();
    }

    private void OnNotifyPlayCard(object? sender, NotifyPlayCardEventArgs args)
    {
        var currentPlayerId = args.CurrentPlayerId;
        if (playerId == currentPlayerId)
        {
            CanPlayHand = true;
            Console.WriteLine("Please select your hand!");
        }
        else
        {
            Console.WriteLine($"Waiting for {currentPlayerId} to Play hand!");
        }
        if (playerId == args.LastValidPlayer)
        {
            foreach (int card in args.LastHand)
                if (cards.Contains(card))
                    cards.Remove(card);
        }
        SelectedCardIds = new List<int>();
        StateHasChanged();
        Console.WriteLine($"Last valid Player is {args.LastValidPlayer}!");
        var lastHand = string.Join(",", args.LastHand);
        Console.WriteLine($"Last Hand is {lastHand}!");
    }

    private void OnNotifyResubmit(object? sender, NotifyResubmitEventArgs args)
    {
        Console.WriteLine($"Failed playing hand! Reselect your card");
        CanPlayHand = true;
        StateHasChanged();
    }


    private void PlayOneMoreRound()
    {
        // var response = await Http.PostAsJsonAsync($"api/game/{GameId}/ReturnTribute?playerId={playerId}&isPlayOneMoreRound={isPlayOneMoreRound}", new { });
        gameState = GameState.WaitingToStart;
        StateHasChanged();
    }


    #region NotificationHandlers
    private void OnNotifyCanStartGame(object? sender, EventArgs args)
    {
        if (playerId != 0)
        {
            Console.WriteLine("Non-host player should not receive this notification!");
            return;
        }

        canStartGame = true;
        StateHasChanged();
    }

    private void OnReceiveMessage(object? sender, ReceiveMessageEventArgs args)
    {
        Console.WriteLine(args.Message);
    }

    private void OnNotifyNewPlayerAdded(object? sender, NotifyNewPlayerAddedEventArgs args)
    {
        players = args.UpdatedPlayers;
        StateHasChanged();
    }

    private void OnNotifyReturnTributeSuccessful(object? sender, NotifyReturnTributeSuccessfulEventArgs args)
    {
        args.ReturnedCardIds.ForEach(cardId => cards.Remove(cardId));
        StateHasChanged();
    }
    #endregion
}
