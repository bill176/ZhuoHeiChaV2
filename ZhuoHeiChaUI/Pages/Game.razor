@page "/game/{gameId:int}"
@using System.Net.Http
@inject HttpClient Http
@using Microsoft.AspNetCore.SignalR.Client
@inject PlayerHubConnectionService PlayerHubConnection
@using ZhuoHeiChaShared
@using ZhuoHeiChaUI.Services
@using ZhuoHeiChaUI.Events
@using ZhuoHeiChaUI.Components

@*@if (!successJoin)
    {
        <div>
            <h3>Enter your name</h3>
            <button @onclick="AddToGame">Enter</button>
            <div>
                <label>Your name</label>
                <input @bind="@userName" />
            </div>
        </div>
    }
    else
    {
        <p>Wait dealer to start game...</p>
        <p>Current player(s):</p>
        <WaitingPlayerList Players="@players" />
        @if (playerId == "0" && StartGameUIFlag)
        {
            <button @onclick="StartGame" disabled="@(canStartGame? false : true)">Start Game</button>
        }
        @if (StartGameUIFlag)
        {
            <p>Wait dealer to start game</p>
        }

        <ButtonContainer ProcessAceGoPublic=@ProcessAceGoPublic ProcessReturnTribute=@ProcessReturnTribute></ButtonContainer>

    }*@

<Notification DisplayMessage="@DisplayMessage"></Notification>

@switch (gameState)
{
    case GameState.Default:
        <div>
            <h3>Enter your name</h3>
            <button @onclick="AddToGame">Enter</button>
            <div>
                <label>Your name</label>
                <input @bind="@userName" />
            </div>
        </div>
        break;

    case GameState.WaitingToStart:
        <p>Wait dealer to start game...</p>
        <p>Current player(s):</p>
        <WaitingPlayerList Players="@players" />
        @if (playerId == 0)
        {
            <button @onclick="StartGame" disabled="@(canStartGame? false : true)">Start Game</button>
        }
        else
        {
            <p>Wait dealer to start game</p>
        }

        break;

    case GameState.DisplayingCard:
        <ButtonContainer PlayerId="@playerId" ProcessAceGoPublic=@ProcessAceGoPublic ProcessReturnTribute=@ProcessReturnTribute ProcessPlayHand=@ProcessPlayHand PlayOneMoreRound=@PlayOneMoreRound></ButtonContainer>
        <PlayingCards CardIds="@cards" IsInteractive="true" @bind-SelectedCardIds="@SelectedCardIds" />
        <label>@string.Join(',', SelectedCardIds)</label>
        <LastHandComponent Players="@players"></LastHandComponent>
        @foreach (var kvp in OpponentCardsCount)
        {
            <RemainingCardCount PlayerId="@kvp.Key" remainingCardCount="@kvp.Value"></RemainingCardCount>
        }
        break;
}



@code {
    [Parameter]
    public int GameId { get; set; }

    private GameState gameState = GameState.Default;

    private Dictionary<int, int> OpponentCardsCount = new Dictionary<int, int>();

    private enum GameState
    {
        Default,
        WaitingToStart,
        DisplayingCard,
        PlayCard
    }

    private int playerId;
    private string userName;
    private bool canStartGame = false;
    private List<Player> players = new List<Player>();
    private List<int> cards = new List<int>();
    private bool CanPlayHand = false;


    private List<int> SelectedCardIds = new List<int>();

    public string DisplayMessage;

    private HubConnection _hubConnection;

    protected override async Task OnInitializedAsync()
    {
        PlayerHubConnection.ReceiveMessage += OnReceiveMessage;
        PlayerHubConnection.NotifyCanStartGame += OnNotifyCanStartGame;
        PlayerHubConnection.NotifyNewPlayerAdded += OnNotifyNewPlayerAdded;
        PlayerHubConnection.InitializeGameState += InitializeGameState;
        PlayerHubConnection.NotifyCardsUpdated += UpdateCards;
        PlayerHubConnection.NotifyPlayCard += OnNotifyPlayCard;
        PlayerHubConnection.NotifyResubmit += OnNotifyResubmit;
        PlayerHubConnection.NotifyReturnTributeSuccesful += OnNotifyReturnTributeSuccessful;
    }

    private async Task AddToGame()
    {

        var connectionId = await PlayerHubConnection.EstablishConnection();
        var response = await Http.PostAsJsonAsync<Player>($"api/game/{GameId}/players", new Player
        {
            ConnectionId = connectionId,
            Name = userName
        });
        if (!response.IsSuccessStatusCode) return;

        var IdString = await response.Content.ReadAsStringAsync();
        playerId = Int32.Parse(IdString);

        Console.WriteLine($"Player # {playerId} added, name: {userName}. Connection id: {connectionId}");
        DisplayMessage = $"Player # {playerId} added, name: {userName}. Connection id: {connectionId}";

        gameState = GameState.WaitingToStart;
        StateHasChanged();
    }

    private async Task StartGame()
    {
        var response = await Http.PostAsJsonAsync($"api/game/{GameId}/init", new { });
        if (!response.IsSuccessStatusCode)
        {
            Console.WriteLine("Unable to init game!");
            DisplayMessage = "Unable to init game!";
            StateHasChanged();
            return;
        }
        Console.WriteLine("Game successfully started!");
        DisplayMessage ="Game successfully started!";
        StateHasChanged();

    }

    private void InitializeGameState(object? sender, InitializeGameStateEventArgs args)
    {
        OpponentCardsCount = args.OpponentCardsCount;

        gameState = GameState.DisplayingCard;
        cards = args.CardBefore;
        Console.WriteLine(string.Join(",", cards));
        // show cards
        Console.WriteLine("This is your original cards");

        cards = args.CardAfter;
        Console.WriteLine(string.Join(",", cards));
        // show cards
        Console.WriteLine("This is your cards after pay tribute");


        DisplayMessage = "This is your cards after pay tribute:" + string.Join(",", cards);
        StateHasChanged();
    }


    private void UpdateCards(object? sender, NotifyCardsUpdatedEventArgs args)
    {
        cards = args.UpdatedCard;
        StateHasChanged();

    }


    private async Task ProcessReturnTribute(int payer)
    {
        string cardsToBeReturnedString = string.Join(",", SelectedCardIds);
        var response = await Http.PostAsJsonAsync($"api/game/{GameId}/ReturnTribute?receiver={playerId}&payer={payer}&cardsToBeReturnedString={cardsToBeReturnedString}", new { });

        if (!response.IsSuccessStatusCode)
        {
            Console.WriteLine($"Failed return cards to {players[payer].Name}!");
            DisplayMessage = $"Failed return cards to {players[payer].Name}!";
            StateHasChanged();
            return;
        }

        SelectedCardIds.Clear();
        Console.WriteLine($"you just return cards to {players[payer].Name}!");
        DisplayMessage = $"you just return cards to {players[payer].Name}!";
        StateHasChanged();
    }

    private async Task ProcessAceGoPublic(bool IsGoPublic)
    {
        var response = await Http.PostAsJsonAsync($"api/game/{GameId}/acegopublic?playerId={playerId}&isGoPublic={IsGoPublic}", new { });
        if (IsGoPublic)
        {
            Console.WriteLine("you just Publish the Ace!");
            DisplayMessage = "you just Publish the Ace!";
        }
        else
        {
            Console.WriteLine("you chose not to publish the Ace!");
            DisplayMessage = "you chose not to publish the Ace!";
        }
        StateHasChanged();
    }

    private async Task ProcessPlayHand(bool isSkip)
    {
        CanPlayHand = false;

        if (isSkip)
        {
            await Http.PostAsJsonAsync($"api/game/{GameId}/PlayHand?playerId={playerId}&cardsTobePlay=", new { });
            Console.WriteLine("Finish Skipping!");
            DisplayMessage = "Finish Skipping!";
            SelectedCardIds = new List<int>();
            StateHasChanged();
            return;
        }

        string cardsTobePlay = string.Join(",", SelectedCardIds);
        var response = await Http.PostAsJsonAsync($"api/game/{GameId}/PlayHand?playerId={playerId}&cardsTobePlay={cardsTobePlay}", new { });
        Console.WriteLine("Finish playing hand!");
        DisplayMessage = "Finish playing hand!";
        SelectedCardIds = new List<int>();
        StateHasChanged();
    }

    private void OnNotifyPlayCard(object? sender, NotifyPlayCardEventArgs args)
    {
        // If this method is called, then someone succeeded playing hand, so update cards count in here.
        OpponentCardsCount = args.OpponentCardsCount;

        var currentPlayerId = args.CurrentPlayerId;
        if (playerId == currentPlayerId)
        {
            CanPlayHand = true;
            Console.WriteLine("Please select your hand!");
            DisplayMessage = "Please select your hand!";
            StateHasChanged();
        }
        else
        {
            Console.WriteLine($"Waiting for {players[currentPlayerId].Name} to Play hand!");
            DisplayMessage = $"Waiting for {players[currentPlayerId].Name} to Play hand!";
        }
        if (playerId == args.LastValidPlayer)
        {
            foreach (int card in args.LastValidHand)
                if (cards.Contains(card))
                    cards.Remove(card);
        }
        SelectedCardIds = new List<int>();
        StateHasChanged();
        Console.WriteLine($"Last valid Player is {players[args.LastValidPlayer].Name}!");

        var lastValidHand = string.Join(",", args.LastValidHand);
        Console.WriteLine($"Last valid Hand is {lastValidHand}!");

        DisplayMessage = $"Last valid Player is {players[args.LastValidPlayer].Name}!" + $"Last Valid Hand is {lastValidHand}!";
        StateHasChanged();
    }

    private void OnNotifyResubmit(object? sender, NotifyResubmitEventArgs args)
    {
        Console.WriteLine($"Failed playing hand! Reselect your card");
        DisplayMessage = $"Failed playing hand! Reselect your card";
        CanPlayHand = true;
        StateHasChanged();
    }


    private void PlayOneMoreRound()
    {
        // var response = await Http.PostAsJsonAsync($"api/game/{GameId}/ReturnTribute?playerId={playerId}&isPlayOneMoreRound={isPlayOneMoreRound}", new { });
        gameState = GameState.WaitingToStart;
        StateHasChanged();
    }


    #region NotificationHandlers
    private void OnNotifyCanStartGame(object? sender, EventArgs args)
    {
        if (playerId != 0)
        {
            Console.WriteLine("Non-host player should not receive this notification!");
            DisplayMessage = "Non-host player should not receive this notification!";
            StateHasChanged();
            return;
        }

        canStartGame = true;
        StateHasChanged();
    }

    private void OnReceiveMessage(object? sender, ReceiveMessageEventArgs args)
    {
        Console.WriteLine(args.Message);
        DisplayMessage = args.Message;
        StateHasChanged();
    }

    private void OnNotifyNewPlayerAdded(object? sender, NotifyNewPlayerAddedEventArgs args)
    {
        players = args.UpdatedPlayers;
        StateHasChanged();
    }

    private void OnNotifyReturnTributeSuccessful(object? sender, NotifyReturnTributeSuccessfulEventArgs args)
    {
        args.ReturnedCardIds.ForEach(cardId => cards.Remove(cardId));
        StateHasChanged();
    }
    #endregion
}
