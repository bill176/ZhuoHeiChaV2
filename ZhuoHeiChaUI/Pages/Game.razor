@page "/game/{gameId:int}"
@using System.Net.Http
@inject HttpClient Http
@using Microsoft.AspNetCore.SignalR.Client
@inject PlayerHubConnectionService PlayerHubConnection
@using ZhuoHeiChaShared
@using ZhuoHeiChaUI.Services
@using ZhuoHeiChaUI.Events
@using ZhuoHeiChaUI.Components

@if (!successJoin)
{
    <div>
    <h3>Enter your name</h3>
    <button @onclick="AddToGame">Enter</button>
    <div>
        <label>Your name</label>
        <input @bind="@userName" />
    </div>
    </div>
}
else
{
    @if (playerId == "0" & StartGameUIFlag)
    {
        <button @onclick="StartGame" disabled="@(canStartGame? false : true)">Start Game</button>
    }
    @if (StartGameUIFlag)
    {
        <p>Wait dealer to start game</p>
    }

// dealer starts the game
    //{
    //    <p>Show table and cards</p>
    //}
    @if (ReturnTributeUIFlag)
    {
       <ReturnTributeComponent OnClick=@StartReturnTribute payer="@payer" cardsCountReturnToPayer="@cardsCountReturnToPayer"></ReturnTributeComponent>
    }
}        




@*decide return tribute process by ReturnTributeListByPlayerId
tell player number of cards to be returned
show cards after return tribute, based on _clientNotificationService.SendCardUpdate
ask players whether ace go public (upon receiving a notification)*@



@code {
    [Parameter]
    public int GameId { get; set; }
    private string playerId;
    private string userName;
    private bool successJoin = false;
    private bool canStartGame = false;
    private List<int> cards;

    private List<int> PlayerTypeListThisRound;
    bool ReturnTributeUIFlag = false;
    bool StartGameUIFlag = true;
    int payer;
    int cardsCountReturnToPayer;

    private HubConnection _hubConnection;

    protected override async Task OnInitializedAsync()
    {
        PlayerHubConnection.ReceiveMessage += OnReceiveMessage;
        PlayerHubConnection.NotifyCanStartGame += OnNotifyCanStartGame;
        PlayerHubConnection.InitializeGameState += InitialGameState;
        PlayerHubConnection.NotifyReturnTribute += OnNotifyReturnTribute;
        PlayerHubConnection.NotifyAceGoPublic += OnNotifyAceGoPublic;
    }

    private async Task AddToGame()
    {
        //_hubConnection.On<IEnumerable<int>>(ClientHubMethods.UpdateCards, (updatedCards) =>
        //{
        //    cards = updatedCards;
        //});

        var connectionId = await PlayerHubConnection.EstablishConnection();
        var response = await Http.PostAsJsonAsync<Player>($"api/game/{GameId}/players", new Player
        {
            ConnectionId = connectionId,
            Name = userName
        });
        if (!response.IsSuccessStatusCode) return;

        playerId = await response.Content.ReadAsStringAsync();
        Console.WriteLine($"Player # {playerId} added, name: {userName}. Connection id: {connectionId}");
        successJoin = true;
        StateHasChanged();
    }

    private async Task StartGame()
    {
        var response = await Http.PostAsJsonAsync($"api/game/{GameId}/init", new { });
        if (!response.IsSuccessStatusCode)
        {
            Console.WriteLine("Unable to init game!");
            return;
        }
        Console.WriteLine("Game successfully started!");

        // hide start game (or waiting for start game) UI
        StartGameUIFlag = false;
        StateHasChanged();
    }

    private void InitialGameState(object? sender, InitializeGameStateEventArgs args)
    {
        cards = args.cardBefore;
        Console.WriteLine(string.Join(",", cards));
        // show cards
        Console.WriteLine("This is your original cards");
        cards = args.cardAfter;
        Console.WriteLine(string.Join(",", cards));
        // show cards
        Console.WriteLine("This is your cards after pay tribute");

    }
    private void OnNotifyReturnTribute(object? sender, NotifyReturnTributeEventArgs args)
    {
        payer = args.payer;
        cardsCountReturnToPayer = args.cardsToBeReturnCount;
        ReturnTributeUIFlag = true;
        StateHasChanged();
    }

    
    private void OnNotifyAceGoPublic(object? sender, NotifyAceGoPublicEventArgs args)
    {
        // TODO

    }

    private async Task StartReturnTribute(List<int> cardsToBeReturned)
    {
        string cardsToBeReturnedString = string.Join(",", cardsToBeReturned);
        var response = await Http.PostAsJsonAsync($"api/game/{GameId}/ReturnTribute?playerId={playerId}&payer={payer}&cardsToBeReturnedString={cardsToBeReturnedString}", new { });

        Console.WriteLine($"you just return cards to {payer}!");

        ReturnTributeUIFlag = false;
        StateHasChanged();
    }




    #region NotificationHandlers
    private void OnNotifyCanStartGame(object? sender, EventArgs args)
    {
        if (playerId != "0")
        {
            Console.WriteLine("Non-host player should not receive this notification!");
            return;
        }

        canStartGame = true;
        StateHasChanged();
    }

    private void OnReceiveMessage(object? sender, ReceiveMessageEventArgs args)
    {
        Console.WriteLine(args.Message);
    }
    #endregion

}
